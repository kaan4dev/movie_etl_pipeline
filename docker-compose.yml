version: "3.9"

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: docker/Dockerfile
  env_file:
    - .env
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: "false"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__LOGGING_LEVEL: INFO
    AIRFLOW__CORE__FERNET_KEY: ${L7j1PL1lSVLSKGbaEwV4pJ2RjNlZDWFFouvZHQxh5QA=}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY:?Missing AIRFLOW_WEBSERVER_SECRET_KEY in .env}
    AIRFLOW__WEBSERVER__WORKERS: "1"
    TMDB_API_KEY: ${593682f76ba4b7e789eb5c52e7775f37}
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  volumes:
    - .:/opt/airflow
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15
    container_name: movie-etl-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    container_name: movie-etl-airflow-init
    command: >-
      bash -c "airflow db migrate &&
               airflow users create --username \"$${AIRFLOW_ADMIN_USERNAME:-admin}\" \
                                      --password \"$${AIRFLOW_ADMIN_PASSWORD:-admin}\" \
                                      --firstname \"$${AIRFLOW_ADMIN_FIRSTNAME:-Admin}\" \
                                      --lastname \"$${AIRFLOW_ADMIN_LASTNAME:-User}\" \
                                      --role Admin \
                                      --email \"$${AIRFLOW_ADMIN_EMAIL:-admin@example.com}\" &&
               airflow variables set TMDB_API_KEY \"$${TMDB_API_KEY}\" || true"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
    restart: "no"

  airflow-scheduler:
    <<: *airflow-common
    container_name: movie-etl-airflow-scheduler
    command: scheduler
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    <<: *airflow-common
    container_name: movie-etl-airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
